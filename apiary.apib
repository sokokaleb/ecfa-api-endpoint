FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# ECFA Data Endpoint API

This API is used by Fraud Analyzer client to store/retrieve information about orders.

## HTTPs Request

Every request should be made to the endpoint `https://api.ecfa-project.space/{resource}`, where `resource`
refers to the resource target. Currently, `resource` only accepts `orders`.

**Note that the request should be made via HTTPs protocol**

Allowed HTTPs request:
- `POST` - Create or update a resource
- `GET` - Retrieve a resource

## API Authorization

You should have had the API Token and Secret in order to be able to communicate with the API endpoint.
Both Token and Secret will be used to make the Basic Authorization header which will look like this:

```javascript
Authorization: Basic Base64-of-token:secret
```

For example, if you have API Token `pakkadim` and API Secret `midakkap`, every request's header
to API endpoint should include

```javascript
Authorization: Basic cGFra2FkaW06bWlkYWtrYXA
```

Notice that `cGFra2FkaW06bWlkYWtrYXA` is the output of `Base64(pakkadim:midakkap)`.

Any request made without specifying the authorization header will be responded with `403` error.

## Notes on API Authorization

If your API Token and Secret are exposed to the public, it should be considered to generate new
API Token and Secret as any adversary knowing the API Token and Secret may use masquerade attacks,
breaching the access to the data stored on the server.


## Multiple Orders [/orders]

Via this endpoint (`/orders`) you can make request related to more than one orders.

### Get Orders [GET]

Using `GET` method, the API will return a list of orders that is specified inside the request body.
Note that the body should be in a form of JSON, and the response will attach only the `order_id` and
its `fraud_percentage`.

+ Request (application/json)
    + Headers
        
            Accept: application/json
            Authorization: Basic base64-of-token:secret
    
    + Attributes (array)
    
    + Body
    
            [
                {
                    "order_id": "A151601"
                }
            ]

+ Response 200 (application/json)

    + Attributes (array[ECFAOrder])
    
    + Body

            [
                {
                    "order_id": "A151003",
                    "fraud_percentage": 25
                }
            ]

+ Response 401 (application/json)
    + Attributes (UnauthorizedResponse)
    
    + Body
    
            {
                "code": 403,
                "message": "Authorization header not found or invalid."
            }

### Update Orders [POST]

Using `POST` method, the API expect the body of the request to contain a JSON object that represents a list of order objects.
The API will later insert order entries based on the objects contained inside the request (or update any of them if any order
has already found inside ECFA's DB).

+ Request (application/json)
    + Headers
        
            Accept: application/json
            Authorization: Basic base64-of-token:secret
        
    + Attributes (array[Order])
    
    + Body
    
            [
                {
                    "order_id": "soko001",
                    "item_total": 123005.00,
                    "total": 115005.00,
                    "adjustment_total": -8000.0,
                    "user":
                    {
                        "user_id": 4,
                        "email": "sokokaleb@gmail.com",
                        "current_sign_in_ip": "127.0.0.1",
                        "last_sign_in_ip": "127.0.0.1",
                        "created_at": "2015-10-10 10:10:10",
                        "updated_at": "2015-10-10 10:10:10",
                        "invitations_count": 0,
                        "first_name": "Udin",
                        "last_name": "Sedunia",
                        "phone_character": "+6287783277820"
                    },
                    "user_verified": true,
                    "total_quantity": 5,
                    "created_at": "2016-10-10 10:10:10",
                    "updated_at": "2016-10-10 12:10:10",
                    "payment_total": 115005.0,
                    "payment_state": "Lunas",
                    "special_instruction": "Ditaro di depan pintu aja ya, Mas",
                    "last_ip_address": "127.0.0.1",
                    "considered_risky": false,
                    "products":
                    [
                        {
                            "product_id": 4,
                            "product_name": "Cabai Segar AF",
                            "description": "Cabai segar, diambil dari perkebunan kaki Gunung Bromo.",
                            "price": 10000.0,
                            "product_type": "Sayuran"
                        },
                        {
                            "product_id": 9,
                            "product_name": "Kecap Manis Cap Bango 1500mL",
                            "description": "Kecap manis original, Cap Bango. Ukuran 1500mL.",
                            "price": 50005.0,
                            "product_type": "Bahan Memasak"
                        },
                        {
                            "product_id": 14,
                            "product_name": "Kecap Manis Cap Kaki Tiga 1500mL",
                            "description": "Kecap manis original, Cap Kaki Tiga. Ukuran 1500mL.",
                            "price": 43000.0,
                            "product_type": "Bahan Memasak"
                        },
                        {
                            "product_id": 19,
                            "product_name": "Cuka Cap Enaak 100mL",
                            "description": "Cuka asam penyedap makanan. Ukuran 100mL.",
                            "price": 10000.0,
                            "product_type": "Bahan Memasak"
                        },
                        {
                            "product_id": 24,
                            "product_name": "Sendok Plastik Pesta, 20pcs",
                            "description": "Sendok plastik untuk kepentingan acara, ukuran kecil, sebanyak 20 buah.",
                            "price": 10000.0,
                            "product_type": "Alat Makan"
                        }
                    ],
                    "ship_address":
                    [
                        {
                            "address_id": 4,
                            "firstname": "Udin",
                            "lastname": "Sedunia",
                            "address1": "Griya Ndeprok Asri E1-14, RT 012/RW 024, Mekarjaya, Sukmajaya",
                            "city": "Kota Depok",
                            "zipcode": "16411",
                            "phone": "+6287783277820",
                            "created_at": "2016-10-10 10:10:10",
                            "updated_at": "2016-10-10 12:10:10",
                            "delivery_instruction": "Ditaro di depan pintu aja ya, Mas"
                        }
                    ],
                    "adjustment":
                    [
                        {
                            "adjustment_id": 4,
                            "source_type": "HappyFresh",
                            "label": "Discount",
                            "amount": 8000.0
                        }
                    ]
                }
            ]

+ Response 200 (application/json)
    + Attributes (CreationUpdateResponse)
    
    + Body
    
            {
                "message": "Data successfully sent."
                "code": 200
            }

+ Response 401 (application/json)
    + Attributes (UnauthorizedResponse)
    
    + Body
    
            {
                "message": "Authorization header not found or invalid.",
                "code": 403
            }

## Single Order/Entry [/order/{order_id}]

+ Parameters
    + order_id (string) - ID of the order in the form of an integer / objectID 

### Get an Order [GET]

Using `GET` method, the API will return an object that informs the `fraud_percentage` of the order which id is
specified.

+ Request 
    + Headers
        
            Authorization: Basic base64-of-token:secret

    
+ Response 200 (application/json)

    + Body

            {
                "order_id": "A151003",
                "fraud_percentage": 25
            }

+ Response 401 (application/json)

    + Body
    
            {
                "code": 401,
                "message": "Authorization header not found or invalid."
            }

### Store an Order [POST]

Using `POST` method, the API expect the body of the request to contain a JSON object that represents an order object.
The API will later insert the order (or update it on ECFA's DB).

+ Request (application/json)
    + Headers
        
            Accept: application/jsonRevam
            Authorization: Basic base64-of-token:secret

    + Body
    
                {
                    "order_id": "soko001",
                    "item_total": 123005.00,
                    "total": 115005.00,
                    "adjustment_total": -8000.0,
                    "user":
                    {
                        "user_id": 4,
                        "email": "sokokaleb@gmail.com",
                        "current_sign_in_ip": "127.0.0.1",
                        "last_sign_in_ip": "127.0.0.1",
                        "created_at": "2015-10-10 10:10:10",
                        "updated_at": "2015-10-10 10:10:10",
                        "invitations_count": 0,
                        "first_name": "Udin",
                        "last_name": "Sedunia",
                        "phone_character": "+6287783277820"
                    },
                    "user_verified": true,
                    "total_quantity": 5,
                    "created_at": "2016-10-10 10:10:10",
                    "updated_at": "2016-10-10 12:10:10",
                    "payment_total": 115005.0,
                    "payment_state": "Lunas",
                    "special_instruction": "Ditaro di depan pintu aja ya, Mas",
                    "last_ip_address": "127.0.0.1",
                    "considered_risky": false,
                    "products":
                    [
                        {
                            "product_id": 4,
                            "product_name": "Cabai Segar AF",
                            "description": "Cabai segar, diambil dari perkebunan kaki Gunung Bromo.",
                            "price": 10000.0,
                            "product_type": "Sayuran"
                        },
                        {
                            "product_id": 9,
                            "product_name": "Kecap Manis Cap Bango 1500mL",
                            "description": "Kecap manis original, Cap Bango. Ukuran 1500mL.",
                            "price": 50005.0,
                            "product_type": "Bahan Memasak"
                        },
                        {
                            "product_id": 14,
                            "product_name": "Kecap Manis Cap Kaki Tiga 1500mL",
                            "description": "Kecap manis original, Cap Kaki Tiga. Ukuran 1500mL.",
                            "price": 43000.0,
                            "product_type": "Bahan Memasak"
                        },
                        {
                            "product_id": 19,
                            "product_name": "Cuka Cap Enaak 100mL",
                            "description": "Cuka asam penyedap makanan. Ukuran 100mL.",
                            "price": 10000.0,
                            "product_type": "Bahan Memasak"
                        },
                        {
                            "product_id": 24,
                            "product_name": "Sendok Plastik Pesta, 20pcs",
                            "description": "Sendok plastik untuk kepentingan acara, ukuran kecil, sebanyak 20 buah.",
                            "price": 10000.0,
                            "product_type": "Alat Makan"
                        }
                    ],
                    "ship_address":
                    [
                        {
                            "address_id": 4,
                            "firstname": "Udin",
                            "lastname": "Sedunia",
                            "address1": "Griya Ndeprok Asri E1-14, RT 012/RW 024, Mekarjaya, Sukmajaya",
                            "city": "Kota Depok",
                            "zipcode": "16411",
                            "phone": "+6287783277820",
                            "created_at": "2016-10-10 10:10:10",
                            "updated_at": "2016-10-10 12:10:10",
                            "delivery_instruction": "Ditaro di depan pintu aja ya, Mas"
                        }
                    ],
                    "adjustment":
                    [
                        {
                            "adjustment_id": 4,
                            "source_type": "HappyFresh",
                            "label": "Discount",
                            "amount": 8000.0
                        }
                    ]
                }

+ Response 200 (application/json)
    + Attributes (CreationUpdateResponse)
    
    + Body
    
            {
                "message": "Data successfully sent."
                "code": 200
            }

+ Response 401 (application/json)
    + Attributes (UnauthorizedResponse)
    
    + Body
    
            {
                "message": "Authorization header not found or invalid.",
                "code": 401
            }


## Multiple Orders/Entries for specific User [/orders/user/{user_id}]

+ Parameters
    + user_id (string) - ID of the order in the form of an integer / objectID 


### Get Orders [GET]

This endpoint is used to get information on orders that were made by user whose id is `user_id`.

+ Request(application/json)
    
    + Headers
    
            Accept: application/json
            Authorization: Basic base64-of-token:secret
    
+ Response 200 (application/json)

    + Body

            {
                "A151602" : 65,
                "A151603" : 100,
                "A151604" : 90,
            }

+ Response 401 (application/json)

    + Body
    
            {
                "code": 403,
                "message": "Authorization header not found or invalid."
            }

## Multiple Orders/Entries for Retrieving Fraud Percentage [/orders/fraud/{fraud_percentage}]

+ Parameters
    + fraud_percentage (int) - Desired fraud percentage to get the list with 


### Get Orders [GET]

This endpoint is used to get orders which has fraud percentage more than `fraud_percentage`.

+ Request(application/json)
    
    + Headers
    
            Authorization: Basic base64-of-token:secret
    
+ Response 200 (application/json)

    + Body

            {
                "A151602" : 65,
                "A151603" : 100,
                "A151604" : 90,
            }

+ Response 401 (application/json)

    + Body
    
            {
                "code": 403,
                "message": "Authorization header not found or invalid."
            }

## Multiple Orders/Entries for Date [/orders/date/{desired_date}]

+ Parameters
    + desired_date (date) - Desired Date as the param, so that it will search the desired 


### Get Orders [GET]

This endpoint is used to get information on orders that were made on the date `desired_date`.
The format for `desired_date` is `dd-mm-yyyy`.

+ Request(application/json)
    
    + Headers
    
            Authorization: Basic base64-of-token:secret
    
+ Response 200 (application/json)

    + Body

            {
                "A151602" : 65,
                "A151603" : 100,
                "A151604" : 90,
            }

+ Response 401 (application/json)

    + Body
    
            {
                "code": 403,
                "message": "Authorization header not found or invalid."
            }

## Multiple Orders/Entries for specific 2 dates [/orders/date/{start_date}/{end_date}]

+ Parameters
    + start_date (date) - Desired fraud percentage to get the list with 
    + end_date (date) - Desired end date to get the list with


### Get Orders [GET]

This endpoint is used to get information on orders that were made between `start_date`
and `end_date`.
The format for `start_date` and `desired_date` is `dd-mm-yyyy`.

+ Request(application/json)
    
    + Headers
    
            Authorization: Basic base64-of-token:secret
    
+ Response 200 (application/json)

    + Body

            {
                "A151602" : 65,
                "A151603" : 100,
                "A151604" : 90,
            }

+ Response 401 (application/json)

    + Body
    
            {
                "code": 403,
                "message": "Authorization header not found or invalid."
            }

## Multiple Orders/Entires for Greater Than Equals Specific Date [/orders/date/after/{date}]

+ Parameters
    + date (date) - Desired date  
    

### Get Orders [GET]

This endpoint is used to get information on orders that were made on the date `date`
or later.
The format for `date` is `dd-mm-yyyy`.

+ Request(application/json)
    
    + Headers
    
            Authorization: Basic base64-of-token:secret
    
+ Response 200 (application/json)

    + Body
    
            {
                "A151602" : 65,
                "A151603" : 100,
                "A151604" : 90,
            }

+ Response 401 (application/json)

    + Body
    
            {
                "code": 403,
                "message": "Authorization header not found or invalid."
            }

## Multiple Orders/Entires for Less Than Equals Specific Date [/orders/before/after/{date}]

+ Parameters
    + date (date) - Desired date  
    

### Get Orders [GET]

This endpoint is used to get information on orders that were made on the date `date`
or before.
The format for `date` is `dd-mm-yyyy`.

+ Request(application/json)
    
    + Headers
    
            Authorization: Basic base64-of-token:secret
    
+ Response 200 (application/json)

    + Body

            {
                "A151602" : 65,
                "A151603" : 100,
                "A151604" : 90,
            }

+ Response 401 (application/json)

    + Body
    
            {
                "code": 403,
                "message": "Authorization header not found or invalid."
            }


# Data Structures

## Order (object)
+ order_id: A151003 (string, required) - The ID for an order/entry.

## ECFAOrder (Order)
+ fraud_percentage: 25 (number) - The fraud percentage of an order/entry.

## Response (object)
+ code: 200 (number, required) - The response's return code.

## CreationUpdateResponse (object)
+ code: 201 (number, required) - The response's return code.
+ successful_ids (array, required) - Collection of string denoting the order ID's which are successfuly made/updated.
    + A151003 (string) - The ID of the successfully made/updated order/entry.
+ unsuccessful_ids (array, required) - Collection of string denoting the order ID's which are failed to be made/updated.
    + B151003 (string) - The ID of the unsuccessfully made/update order/entry.

## UnauthorizedResponse (object)
+ code: 403 (number, required) - The response's return code.
+ message: Authorization header not found or invalid. (string, required) - The message denoting the error.